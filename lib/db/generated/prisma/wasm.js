
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StreamScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  userId: 'userId',
  role: 'role',
  parts: 'parts',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  attachments: 'attachments',
  vote: 'vote'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  isExternal: 'isExternal',
  externalConnectionId: 'externalConnectionId',
  externalConnectionName: 'externalConnectionName',
  balance: 'balance',
  currencyCode: 'currencyCode',
  currencyName: 'currencyName',
  currencySymbol: 'currencySymbol',
  currencyNumericCode: 'currencyNumericCode',
  displayName: 'displayName',
  name: 'name',
  number: 'number',
  openedDate: 'openedDate',
  closedDate: 'closedDate',
  routingNumber: 'routingNumber',
  type: 'type',
  subType: 'subType',
  status: 'status',
  balanceDue: 'balanceDue',
  currentPrincipal: 'currentPrincipal',
  dueDate: 'dueDate',
  interestRate: 'interestRate',
  lastPaymentDate: 'lastPaymentDate',
  nextPaymentDate: 'nextPaymentDate',
  originalPrincipal: 'originalPrincipal',
  paymentAmount: 'paymentAmount',
  paymentDate: 'paymentDate',
  term: 'term',
  cardNumber: 'cardNumber',
  creditLimit: 'creditLimit',
  minimumPaymentAmount: 'minimumPaymentAmount',
  statementBalance: 'statementBalance',
  availableBalance: 'availableBalance',
  dividendRate: 'dividendRate',
  interestYTD: 'interestYTD',
  cashBalance: 'cashBalance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  customerId: 'customerId',
  isExternal: 'isExternal',
  externalConnectionId: 'externalConnectionId',
  externalConnectionName: 'externalConnectionName',
  payee: 'payee',
  rawPayee: 'rawPayee',
  description: 'description',
  memo: 'memo',
  amount: 'amount',
  date: 'date',
  type: 'type',
  categoryId: 'categoryId',
  categoryName: 'categoryName',
  budgetCategoryId: 'budgetCategoryId',
  budgetCategory: 'budgetCategory',
  budgetSubcategory: 'budgetSubcategory',
  tags: 'tags',
  currencyCode: 'currencyCode',
  currencyName: 'currencyName',
  currencySymbol: 'currencySymbol',
  currencyNumericCode: 'currencyNumericCode',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  pageContent: 'pageContent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  embedding: 'embedding',
  metadata: 'metadata'
};

exports.Prisma.SampleAccountScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  balance: 'balance',
  currencyCode: 'currencyCode',
  currencyName: 'currencyName',
  currencySymbol: 'currencySymbol',
  currencyNumericCode: 'currencyNumericCode',
  displayName: 'displayName',
  name: 'name',
  number: 'number',
  openedDate: 'openedDate',
  closedDate: 'closedDate',
  routingNumber: 'routingNumber',
  type: 'type',
  subType: 'subType',
  status: 'status',
  balanceDue: 'balanceDue',
  currentPrincipal: 'currentPrincipal',
  dueDate: 'dueDate',
  interestRate: 'interestRate',
  lastPaymentDate: 'lastPaymentDate',
  nextPaymentDate: 'nextPaymentDate',
  originalPrincipal: 'originalPrincipal',
  paymentAmount: 'paymentAmount',
  paymentDate: 'paymentDate',
  term: 'term',
  cardNumber: 'cardNumber',
  creditLimit: 'creditLimit',
  minimumPaymentAmount: 'minimumPaymentAmount',
  statementBalance: 'statementBalance',
  availableBalance: 'availableBalance',
  dividendRate: 'dividendRate',
  interestYTD: 'interestYTD',
  cashBalance: 'cashBalance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SampleTransactionScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  customerId: 'customerId',
  payee: 'payee',
  rawPayee: 'rawPayee',
  description: 'description',
  memo: 'memo',
  amount: 'amount',
  date: 'date',
  type: 'type',
  categoryId: 'categoryId',
  categoryName: 'categoryName',
  budgetCategoryId: 'budgetCategoryId',
  budgetCategory: 'budgetCategory',
  budgetSubcategory: 'budgetSubcategory',
  tags: 'tags',
  currencyCode: 'currencyCode',
  currencyName: 'currencyName',
  currencySymbol: 'currencySymbol',
  currencyNumericCode: 'currencyNumericCode',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SampleDocumentScalarFieldEnum = {
  id: 'id',
  pageContent: 'pageContent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  embedding: 'embedding',
  metadata: 'metadata'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.VoteType = exports.$Enums.VoteType = {
  up: 'up',
  down: 'down'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  credit: 'credit',
  debit: 'debit'
};

exports.Prisma.ModelName = {
  Chat: 'Chat',
  Stream: 'Stream',
  Message: 'Message',
  Account: 'Account',
  Transaction: 'Transaction',
  Document: 'Document',
  SampleAccount: 'SampleAccount',
  SampleTransaction: 'SampleTransaction',
  SampleDocument: 'SampleDocument'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
